// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String        @id @default(cuid())
  name                  String?
  email                 String        @unique
  gamertag              String?
  role                  Role          @default(USER)
  hackathons            Hackathon[]
  teams                 Team[]
  emailVerified         Boolean?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  isVerified            Boolean?
  lightningAddress      String?
  publicBio             String?
  publicStaticCharge    String?
  social                Json?
  balance               String?
  remainingAmountLimits Json?
  judge                 Judge[]
  mentor                Mentor[]
  teamMembers           teamMembers[]
  teamRequest           teamRequest[]
  skill                 String?
  location              String?
  availability          Boolean?

  @@unique([id, gamertag, email, image])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  description   String
  teamAvatar    String  @default("ðŸ˜Š")
  colorAvatar   String? @default("#FFFFFF")
  projects      Project[]
  registrations HackathonRegistration[]

  creator     User          @relation(fields: [creatorId], references: [id])
  creatorId   String
  teamMembers teamMembers[]
  teamRequest teamRequest[]
}

model Hackathon {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title           String
  description     String
  benefits        String
  rules           String
  judgingCriteria String

  firstPlacePrize  String
  secondPlacePrize String
  thirdPlacePrize  String

  projects      Project[]
  registrations HackathonRegistration[]
  judge         Judge[]
  mentor        Mentor[]

  published         Boolean             @default(false)
  creator           User                @relation(fields: [creatorId], references: [id])
  creatorId         String
  judgeassessments  Judgeassessments[]
  hackathonSponsors HackathonSponsors[]

  startDate String
  endDate   String
}

model HackathonRegistration {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
  hackathonId String
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      String

  // TODO:
  // Add creatorId to make it easier to find registrations.
  // creator   User   @relation(fields: [creatorId], references: [id])
  // creatorId String

  // @@unique([creatorId, teamId, hackathonId])

  @@unique([teamId, hackathonId])
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                String
  description         String
  loomLink            String
  pitchLink           String
  projectResourceLink String
  comments            String?

  hackathon        Hackathon          @relation(fields: [hackathonId], references: [id])
  hackathonId      String
  judgeassessments Judgeassessments[]
  team             Team               @relation(fields: [teamId], references: [id])
  teamId           String

  @@unique([teamId, hackathonId])
}

model Contact {
  id       String @id @default(cuid())
  name     String
  email    String
  company  String
  comments String
}

model Sponsors {
  id      String @id @default(cuid())
  name    String
  email   String
  company String
}

enum Role {
  USER
  ADMIN
}

model Judge {
  id               String             @id @default(cuid())
  user             User               @relation(fields: [userId, judgeGamertag, email, judgeImage], references: [id, gamertag, email, image])
  userId           String
  judgeGamertag    String
  email            String
  judgeImage       String
  hackathon        Hackathon          @relation(fields: [hackathonId], references: [id])
  hackathonId      String
  judgeassessments Judgeassessments[]
}

model Mentor {
  id             String    @id @default(cuid())
  user           User      @relation(fields: [userId, mentorGamertag, email, mentorImage], references: [id, gamertag, email, image])
  userId         String
  mentorGamertag String
  email          String
  mentorImage    String
  hackathon      Hackathon @relation(fields: [hackathonId], references: [id])
  hackathonId    String
}

model Judgeassessments {
  id              String  @id @default(cuid())
  impact          Int
  feasability     Int
  user_experience Int
  scalability     Int
  innovate        Int
  pitch           Int
  overall_score   Decimal

  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
  hackathonId String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  judge   Judge  @relation(fields: [judgeId], references: [id])
  judgeId String
}

model HackathonSponsors {
  id          String    @id @default(cuid())
  name        String
  email       String
  image       String
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
  hackathonId String
}

model teamMembers {
  id     String @id @default(cuid())
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model teamRequest {
  id             String  @id @default(cuid())
  team           Team    @relation(fields: [teamId], references: [id])
  teamId         String
  teamName       String
  user           User    @relation(fields: [userSender], references: [id])
  userSender     String
  userSenderName String
  userReceiver   String?
  state          Boolean //True acepto la solicitud, false no ha aceptado/visto la solictud o le dio no aceptar
}
